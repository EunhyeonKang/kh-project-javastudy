--PL/SQL을 사용한 출력내용을 화면에 보여주는 설정
SET SERVEROUTPUT ON;  

BEGIN
    DBMS_OUTPUT.PUT_LINE('HELLO ORACLE');
END;
/
--위에 set serveroutput on 안해주면 hello oracle 안보인다


SELECT * FROM EMPLOYEE;
--이름이 선동일인 직원의 사번 출력
SELECT EMP_ID FROM EMPLOYEE WHERE EMP_NAME = '선동일';
--사번을 변수에 저장했다가 출력하기

DECLARE  --변수 선언부 (변수이름 자료형)
    ID NUMBER;
BEGIN
    SELECT EMP_ID 
    INTO ID
    FROM EMPLOYEE WHERE EMP_NAME = '&이름'; --엔드기호는 주석안에있어도 처리되니까 다른문구로사용하셈
    DBMS_OUTPUT.PUT_LINE(ID);
    
EXCEPTION -- 예외상황 처리부 BEGIN에 WHERE 데이터가 없을경우 아래코드로 처리한다.
    WHEN NO_DATA_FOUND THEN DBMS_OUTPUT.PUT_LINE('데이터가 없습니다');
END;
/

--사번을 입력받아서 이름 직급코드, 부서코드 출력
DECLARE
    NAME VARCHAR2(20);
    J_CODE VARCHAR2(20);
    D_CODE VARCHAR2(20);
BEGIN
    SELECT EMP_NAME ,JOB_CODE,DEPT_CODE
    INTO NAME , J_CODE, D_CODE
    FROM EMPLOYEE WHERE EMP_ID='&사번';
    DBMS_OUTPUT.PUT_LINE('이름 : '||NAME);
    DBMS_OUTPUT.PUT_LINE('직급코드 : '||J_CODE);
    DBMS_OUTPUT.PUT_LINE('부서코드 : '||D_CODE);
EXCEPTION
     WHEN NO_DATA_FOUND THEN DBMS_OUTPUT.PUT_LINE('데이터가 없습니다');
END;
/
--사원번호를 입력받아서
-- 이름, 부서명, 직급명 출력 -> JOIN해서 하면됨 쌤은 서브쿼리로 보여주겠음 
DECLARE --변수 3개 
    NAME VARCHAR2(20);
    D_TITLE VARCHAR2(20);
    J_NAME VARCHAR2(20);
BEGIN
    SELECT EMP_NAME, DEPT_TITLE,JOB_NAME
    INTO NAME, D_TITLE, J_NAME
    FROM EMPLOYEE
    JOIN
    JOIN
    WHERE EMP_ID='&사번';
    DBMS_OUTPUT.PUT_LINE('이름 : ' || NAME);
    DBMS_OUTPUT.PUT_LINE('부서 : ' || D_TITLE);
    DBMS_OUTPUT.PUT_LINE('직급 : ' || J_NAME);
END;
/

DECLARE --서브쿼리 작성법 
    NAME VARCHAR2(20);
    D_TITLE VARCHAR2(20);
    J_NAME VARCHAR2(20);
BEGIN
    SELECT 
        EMP_NAME,
        (SELECT DEPT_TITLE FROM DEPARTMENT D WHERE E.DEPT_CODE = D.DEPT_ID),
        (SELECT JOB_NAME FROM JOB J WHERE E.JOB_CODE = J.JOB_CODE)
    INTO NAME, D_TITLE, J_NAME
    FROM EMPLOYEE E
    WHERE EMP_ID='&사번';
    DBMS_OUTPUT.PUT_LINE('이름 : ' || NAME);
    DBMS_OUTPUT.PUT_LINE('부서 : ' || D_TITLE);
    DBMS_OUTPUT.PUT_LINE('직급 : ' || J_NAME);
END;
/


/*
변수선언
변수명 [constant] 자료형(크기) [NOT NULL] [:=초기값];   
CONSTANT -> 상수 (변하지않는수)
*/

DECLARE
    NO1 NUMBER :=10;
BEGIN
    DBMS_OUTPUT.PUT_LINE(NO1);
    NO1 :=100;
    DBMS_OUTPUT.PUT_LINE(NO1);
END;
/

DECLARE
    NAME EMPLOYEE.EMP_NAME%TYPE;
    D_CODE EMPLOYEE.DEPT_CODE%TYPE;
    -- NAME VARCHAR2(3); 크기 모자라서 에러나자나 위처럼 참조하면 에러날이유가없음 
BEGIN
    SELECT EMP_NAME,DEPT_CODE
    INTO NAME,D_CODE
    FROM EMPLOYEE WHERE EMP_ID='&사번을입력하라이부분임';
    DBMS_OUTPUT.PUT_LINE(NAME);
    DBMS_OUTPUT.PUT_LINE(D_CODE);
END;
/

DECLARE
    MYROW EMPLOYEE%ROWTYPE;  -- 한줄에 해당하는 모든 타입을 가져옴
BEGIN
    SELECT EMP_NAME,EMAIL,PHONE,SALARY,HIRE_DATE
    INTO MYROW.EMP_NAME,MYROW.EMAIL,MYROW.PHONE,MYROW.SALARY,MYROW.HIRE_DATE
    FROM EMPLOYEE WHERE EMP_ID='&사번';
    DBMS_OUTPUT.PUT_LINE(MYROW.EMP_NAME);
END;
/

DECLARE 
    --MYRECORD 라는 데이터타입 작성
    TYPE MYRECORD IS RECORD(
        NAME EMPLOYEE.EMP_NAME%TYPE,
        EMAIL EMPLOYEE.EMAIL%TYPE,
        PHONE EMPLOYEE.PHONE%TYPE,
        SAL EMPLOYEE.SALARY%TYPE,
        H_DATE EMPLOYEE.HIRE_DATE%TYPE
    );
    --MTRECORD 타입 변수 선언
    MY MYRECORD;
BEGIN
    SELECT EMP_NAME, EMAIL,PHONE,SALARY,HIRE_DATE
    INTO MY
    FROM EMPLOYEE WHERE EMP_ID = '&사번';
    DBMS_OUTPUT.PUT_LINE(MY.NAME);
    DBMS_OUTPUT.PUT_LINE(MY.EMAIL);
    DBMS_OUTPUT.PUT_LINE(MY.PHONE);
    DBMS_OUTPUT.PUT_LINE(MY.SAL);
    DBMS_OUTPUT.PUT_LINE(MY.H_DATE);
END;
/

--@실습문제1
--사번, 사원명, 직급코드, 급여를 담을 수 있는 참조변수를 통해서 (%TYPE)
--송종기 사원의 사번, 사원명, 직급코드, 급여를 익명블럭을 통해 스크립트 출력하시오.
DECLARE
    E_NO EMPLOYEE.EMP_NO%TYPE;
    E_NAME EMPLOYEE.EMP_NAME%TYPE;
    E_JOB_C EMPLOYEE.JOB_CODE%TYPE;
    SAL EMPLOYEE.SALARY%TYPE;
BEGIN
    SELECT  EMP_NO, EMP_NAME,JOB_CODE,SALARY
    INTO E_NO, E_NAME, E_JOB_C, SAL
    FROM EMPLOYEE WHERE EMP_NAME='&사원이름입력';
    DBMS_OUTPUT.PUT_LINE(E_NO);
    DBMS_OUTPUT.PUT_LINE(E_NAME);
    DBMS_OUTPUT.PUT_LINE(E_JOB_C);
    DBMS_OUTPUT.PUT_LINE(SAL);
END;
/
SELECT * FROM EMPLOYEE;
--@실습문제2
--사번, 사원명, 부서명,직급명을 담을 수 있는 참조변수를 통해서 (RECORD)
-- 사원명을 검색하여 해당 사원의 사번, 사원명, 부서명, 직급명을
-- 익명블럭을 통해 스크립트 출력하시오

DECLARE 
    TYPE TEST_RECORD IS RECORD(
        E_NO EMPLOYEE.EMP_NO%TYPE,
        E_NAME EMPLOYEE.EMP_NAME%TYPE,
        D_TITLE DEPARTMENT.DEPT_TITLE%TYPE,
        J_NAME JOB.JOB_NAME%TYPE
    );   
    TEST1 TEST_RECORD;
BEGIN
    SELECT EMP_NO, EMP_NAME, DEPT_TITLE, JOB_NAME
    INTO TEST1
    FROM EMPLOYEE
    LEFT JOIN DEPARTMENT ON (DEPT_ID = DEPT_CODE)
    LEFT JOIN JOB USING(JOB_CODE)
    WHERE EMP_NAME = '&사원명입력';
    DBMS_OUTPUT.PUT_LINE(TEST1.E_NO);
    DBMS_OUTPUT.PUT_LINE(TEST1.E_NAME);
    DBMS_OUTPUT.PUT_LINE(TEST1.D_TITLE);
    DBMS_OUTPUT.PUT_LINE(TEST1.J_NAME);
END;
/
SELECT * FROM EMPLOYEE;
--@실습문제3
-- 사원번호를 입력하여 해당 사원을 찾아 (%ROWTYPE을 사용)
-- 사원명, 주민번호, 입사일, 부서명을
-- 익명블록을 통해 스크립트 출력하시오

DECLARE
    EMP EMPLOYEE%ROWTYPE;  
    DEP DEPARTMENT%ROWTYPE;
BEGIN
    SELECT EMP_NAME,EMP_NO,HIRE_DATE,DEPT_TITLE
    INTO EMP.EMP_NAME,EMP.EMP_NO,EMP.HIRE_DATE,DEP.DEPT_TITLE
    FROM EMPLOYEE 
    LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
    WHERE EMP_ID ='&사원번호';
    DBMS_OUTPUT.PUT_LINE(EMP.EMP_NAME);
    DBMS_OUTPUT.PUT_LINE(EMP.EMP_NO);
    DBMS_OUTPUT.PUT_LINE(EMP.HIRE_DATE);
    DBMS_OUTPUT.PUT_LINE(DEP.DEPT_TITLE);
END;
/

--선택문
-- IF, IF ~ ELSE, IF ELSE IF
/*
    IF(조건식){
        조건식이 TRUE면 수행하는 코드
    }
    IF 조건 THEN 조건 TRUE면 실행할 구문
    END IF
*/
-- 사원번호를 입력받아서 사번,이름,급여,보너스 출력
-- 만약에 보너스가 없으면 '보너스를 지급받지 않는 사원입니다.'출력
DECLARE
    ID EMPLOYEE.EMP_ID%TYPE;
    NAME EMPLOYEE.EMP_NAME%TYPE;
    SAL EMPLOYEE.SALARY%TYPE;
    BO EMPLOYEE.BONUS%TYPE;
BEGIN
    SELECT EMP_ID,EMP_NAME,SALARY, NVL(BONUS,0)
    INTO ID,NAME,SAL,BO
    FROM EMPLOYEE WHERE EMP_ID = '&사원번호';
    DBMS_OUTPUT.PUT_LINE('사번 : '||ID);
    DBMS_OUTPUT.PUT_LINE('이름 : '||NAME);
    DBMS_OUTPUT.PUT_LINE('급여 : '||SAL);
    DBMS_OUTPUT.PUT_LINE('보너스율 : '||BO*100||'%');
    IF(BO=0)
    THEN DBMS_OUTPUT.PUT_LINE('보너스를 지급받지 않는 사원입니다.');
    END IF;
END;
/

SELECT * FROM JOB;


--사원번호를 입력받고 사번, 이름, 부서코드, 부서명을 출력
--이때 직급코드가 J1,J2이면 '임원진입니다.',그외는 '일반직원입니다.'
DECLARE
    ID EMPLOYEE.EMP_ID%TYPE;
    NAME EMPLOYEE.EMP_NAME%TYPE;
    D_CODE EMPLOYEE.DEPT_CODE%TYPE;
    D_TITLE DEPARTMENT.DEPT_TITLE%TYPE;
    J_CODE EMPLOYEE.JOB_CODE%TYPE;
BEGIN
    SELECT EMP_ID,EMP_NAME,DEPT_CODE,DEPT_TITLE,JOB_CODE
    INTO ID,NAME,D_CODE,D_TITLE,J_CODE
    FROM EMPLOYEE
    LEFT JOIN DEPARTMENT ON (DEPT_ID = DEPT_CODE)
    WHERE EMP_ID ='&사번';
    DBMS_OUTPUT.PUT_LINE('사번 : '||ID);
    DBMS_OUTPUT.PUT_LINE('이름 : '||NAME);
    DBMS_OUTPUT.PUT_LINE('부서코드 : '||D_CODE);
    DBMS_OUTPUT.PUT_LINE('부서명 : '||D_TITLE);
    IF J_CODE IN ('J1','J2')
    THEN DBMS_OUTPUT.PUT_LINE('임원진 입니다.');
    ELSE DBMS_OUTPUT.PUT_LINE('일반직원 입니다.');
    END IF;
END;
/

--사번을 입력 받은 후 급여에 따라서 등급을 나누어 출력
--출력은 사번, 이름, 급여, 급여등급
--500만원 이상 : A / 300 ~ 500만원 : B / 그외 C
DECLARE
    ID EMPLOYEE.EMP_ID%TYPE;
    NAME EMPLOYEE.EMP_NAME%TYPE;
    SAL EMPLOYEE.SALARY%TYPE;
    SALGRADE CHAR(1);
BEGIN
    SELECT EMP_ID,EMP_NAME, SALARY 
    INTO ID,NAME,SAL
    FROM EMPLOYEE WHERE EMP_ID = '&사번';
    DBMS_OUTPUT.PUT_LINE('사번 : '|| ID);
    DBMS_OUTPUT.PUT_LINE('이름 : '|| NAME);
    DBMS_OUTPUT.PUT_LINE('급여 : '|| SAL);
    IF SAL>=5000000 THEN SALGRADE :='A';
    ELSIF 3000000<=SAL AND SAL <5000000 THEN SALGRADE :='B';
    ELSE SALGRADE :='C';
    END IF;
    DBMS_OUTPUT.PUT_LINE('급여등급 : '|| SALGRADE);
END;
/



